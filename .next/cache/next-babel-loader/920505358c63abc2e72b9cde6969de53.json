{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios from \"../utils/axios\";\nvar model = {\n  namespace: 'index',\n  state: {\n    name: 'i am index',\n    count: 0,\n    init: false\n  },\n  reducers: {\n    caculate: function caculate(state, payload) {\n      var count = state.count;\n      var delta = payload.delta;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: count + delta\n      });\n    }\n  },\n  effects: {\n    init: /*#__PURE__*/_regeneratorRuntime.mark(function init(action, _ref) {\n      var put;\n      return _regeneratorRuntime.wrap(function init$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              put = _ref.put;\n              _context.next = 3;\n              return put({\n                type: 'caculate',\n                delta: 1\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, init);\n    }),\n    asyncGetData: /*#__PURE__*/_regeneratorRuntime.mark(function asyncGetData(action, _ref2) {\n      var put, result;\n      return _regeneratorRuntime.wrap(function asyncGetData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              put = _ref2.put;\n              _context2.next = 3;\n              return axios.get('/api/getString');\n\n            case 3:\n              result = _context2.sent;\n              console.log(result);\n\n            case 5:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, asyncGetData);\n    })\n  }\n};\nexport default model;","map":{"version":3,"sources":["E:/zsDir/nextjs-learn/model/index.model.ts"],"names":["axios","model","namespace","state","name","count","init","reducers","caculate","payload","delta","effects","action","put","type","asyncGetData","get","result","console","log"],"mappings":";;;;;;;AAAA,OAAOA,KAAP;AAMA,IAAMC,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,OADC;AAEZC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,YADD;AAELC,IAAAA,KAAK,EAAE,CAFF;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAFK;AAOZC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QADQ,oBACCL,KADD,EACoBM,OADpB,EAC6B;AAAA,UAC3BJ,KAD2B,GACjBF,KADiB,CAC3BE,KAD2B;AAAA,UAE3BK,KAF2B,GAEjBD,OAFiB,CAE3BC,KAF2B;AAGnC,6CAAYP,KAAZ;AAAmBE,QAAAA,KAAK,EAAEA,KAAK,GAAGK;AAAlC;AACD;AALO,GAPE;AAcZC,EAAAA,OAAO,EAAE;AACNL,IAAAA,IADM,sDACDM,MADC;AAAA;AAAA;AAAA;AAAA;AAAA;AACSC,cAAAA,GADT,QACSA,GADT;AAAA;AAEL,qBAAMA,GAAG,CAAC;AAAEC,gBAAAA,IAAI,EAAE,UAAR;AAAoBJ,gBAAAA,KAAK,EAAE;AAA3B,eAAD,CAAT;;AAFK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAINK,IAAAA,YAJM,8DAIOH,MAJP;AAAA;AAAA;AAAA;AAAA;AAAA;AAIeC,cAAAA,GAJf,SAIeA,GAJf;AAAA;AAKU,qBAAMb,KAAK,CAACgB,GAAN,CAAU,gBAAV,CAAN;;AALV;AAKCC,cAAAA,MALD;AAMLC,cAAAA,OAAO,CAACC,GAAR,CAAYF,MAAZ;;AANK;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAdG,CAAd;AAyBA,eAAehB,KAAf","sourcesContent":["import axios from '../utils/axios';\nexport interface IindexState {\n  name: string;\n  count: number;\n  init: boolean;\n}\nconst model = {\n  namespace: 'index',\n  state: {\n    name: 'i am index',\n    count: 0,\n    init: false,\n  },\n  reducers: {\n    caculate(state:IindexState, payload) {\n      const { count } = state;\n      const { delta } = payload;\n      return { ...state, count: count + delta };\n    },\n  },\n  effects: {\n    *init(action, { put }) {\n      yield put({ type: 'caculate', delta: 1 });\n    },\n    *asyncGetData(action,{put}){\n      const result = yield axios.get('/api/getString');\n      console.log(result)\n    }\n  },\n};\n\nexport default model;\n\n"]},"metadata":{},"sourceType":"module"}