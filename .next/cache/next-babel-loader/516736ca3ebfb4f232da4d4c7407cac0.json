{"ast":null,"code":"function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\nconst delay = timeout => new Promise(resolve => setTimeout(resolve, timeout));\n\nconst model = {\n  namespace: 'index',\n  state: {\n    name: 'hopperhuang',\n    count: 0,\n    init: false\n  },\n  reducers: {\n    caculate(state, payload) {\n      const {\n        count\n      } = state;\n      console.log(payload);\n      const {\n        delta\n      } = payload;\n      return _objectSpread(_objectSpread({}, state), {}, {\n        count: count + delta\n      });\n    }\n\n  },\n  effects: {\n    async init(action, {\n      put\n    }) {\n      console.log(222);\n      await put({\n        type: 'caculate',\n        delta: 1\n      });\n    }\n\n  }\n};\nexport default model;","map":{"version":3,"sources":["E:/zsDir/nextjs-learn/model/homepage.ts"],"names":["delay","timeout","Promise","resolve","setTimeout","model","namespace","state","name","count","init","reducers","caculate","payload","console","log","delta","effects","action","put","type"],"mappings":";;;;;;AAAA,MAAMA,KAAK,GAAGC,OAAO,IAAI,IAAIC,OAAJ,CAAYC,OAAO,IAAIC,UAAU,CAACD,OAAD,EAAUF,OAAV,CAAjC,CAAzB;;AAEA,MAAMI,KAAK,GAAG;AACZC,EAAAA,SAAS,EAAE,OADC;AAEZC,EAAAA,KAAK,EAAE;AACLC,IAAAA,IAAI,EAAE,aADD;AAELC,IAAAA,KAAK,EAAE,CAFF;AAGLC,IAAAA,IAAI,EAAE;AAHD,GAFK;AAOZC,EAAAA,QAAQ,EAAE;AACRC,IAAAA,QAAQ,CAACL,KAAD,EAAQM,OAAR,EAAiB;AACvB,YAAM;AAAEJ,QAAAA;AAAF,UAAYF,KAAlB;AACAO,MAAAA,OAAO,CAACC,GAAR,CAAYF,OAAZ;AACA,YAAM;AAAEG,QAAAA;AAAF,UAAYH,OAAlB;AACA,6CAAYN,KAAZ;AAAmBE,QAAAA,KAAK,EAAEA,KAAK,GAAGO;AAAlC;AACD;;AANO,GAPE;AAeZC,EAAAA,OAAO,EAAE;AACP,UAAMP,IAAN,CAAYQ,MAAZ,EAAoB;AAAEC,MAAAA;AAAF,KAApB,EAA6B;AAC3BL,MAAAA,OAAO,CAACC,GAAR,CAAY,GAAZ;AACA,YAAMI,GAAG,CAAC;AAAEC,QAAAA,IAAI,EAAE,UAAR;AAAoBJ,QAAAA,KAAK,EAAE;AAA3B,OAAD,CAAT;AACD;;AAJM;AAfG,CAAd;AAuBA,eAAeX,KAAf","sourcesContent":["const delay = timeout => new Promise(resolve => setTimeout(resolve, timeout));\n\nconst model = {\n  namespace: 'index',\n  state: {\n    name: 'hopperhuang',\n    count: 0,\n    init: false,\n  },\n  reducers: {\n    caculate(state, payload) {\n      const { count } = state;\n      console.log(payload)\n      const { delta } = payload;\n      return { ...state, count: count + delta };\n    },\n  },\n  effects: {\n    async init (action, { put }) {\n      console.log(222)\n      await put({ type: 'caculate', delta: 1 });\n    },\n  },\n};\n\nexport default model;\n\n"]},"metadata":{},"sourceType":"module"}