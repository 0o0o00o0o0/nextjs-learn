{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nvar model = {\n  namespace: 'user',\n  state: {\n    name: 'hopperhuang'\n  },\n  reducers: {\n    changeName: function changeName(state, payload) {\n      return _objectSpread(_objectSpread({}, state), {}, {\n        name: payload.name\n      });\n    }\n  },\n  effects: {\n    change: /*#__PURE__*/_regeneratorRuntime.mark(function change(action, _ref) {\n      var put;\n      return _regeneratorRuntime.wrap(function change$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              put = _ref.put;\n              _context.next = 3;\n              return put({\n                type: 'changeName',\n                name: Math.random().toString(32).slice(2)\n              });\n\n            case 3:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, change);\n    })\n  }\n};\nexport default model;","map":{"version":3,"sources":["E:/zsDir/nextjs-learn/model/user.model.ts"],"names":["model","namespace","state","name","reducers","changeName","payload","effects","change","action","put","type","Math","random","toString","slice"],"mappings":";;;;;;;AAGA,IAAMA,KAAK,GAAG;AACVC,EAAAA,SAAS,EAAE,MADD;AAEVC,EAAAA,KAAK,EAAE;AACHC,IAAAA,IAAI,EAAE;AADH,GAFG;AAKVC,EAAAA,QAAQ,EAAE;AACNC,IAAAA,UADM,sBACKH,KADL,EACmBI,OADnB,EAC4B;AAC9B,6CAAYJ,KAAZ;AAAmBC,QAAAA,IAAI,EAAEG,OAAO,CAACH;AAAjC;AACH;AAHK,GALA;AAUVI,EAAAA,OAAO,EAAE;AACJC,IAAAA,MADI,wDACGC,MADH;AAAA;AAAA;AAAA;AAAA;AAAA;AACaC,cAAAA,GADb,QACaA,GADb;AAAA;AAID,qBAAMA,GAAG,CAAC;AAAEC,gBAAAA,IAAI,EAAE,YAAR;AAAsBR,gBAAAA,IAAI,EAAES,IAAI,CAACC,MAAL,GAAcC,QAAd,CAAuB,EAAvB,EAA2BC,KAA3B,CAAiC,CAAjC;AAA5B,eAAD,CAAT;;AAJC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAVC,CAAd;AAmBA,eAAef,KAAf","sourcesContent":["interface Iuser {\r\n    name: string;\r\n}\r\nconst model = {\r\n    namespace: 'user',\r\n    state: {\r\n        name: 'hopperhuang',\r\n    },\r\n    reducers: {\r\n        changeName(state: Iuser, payload) {\r\n            return { ...state, name: payload.name }\r\n        },\r\n    },\r\n    effects: {\r\n        *change(action, { put }) {\r\n            // yield delay(2000);\r\n\r\n            yield put({ type: 'changeName', name: Math.random().toString(32).slice(2) });\r\n        },\r\n    },\r\n};\r\n\r\nexport default model;\r\n"]},"metadata":{},"sourceType":"module"}